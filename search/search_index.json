{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Moona Audio Overview Moona Audio is a Unity3D plugin written by Maris Tammik for A Shell In The Pit Inc. bringing advanced audio playback possibilities and enabling sound designers to implement and control audio easily while making integration and playback from code a breeze. streamline dynamic audio asset creation simple API for complex audio behaviour customizable (full source code) Getting Started To get started with designing sound behaviours in Moona start here and if you want to use the Moona API in from script start here . License Moona Audio is licensend to clients of \"A Shell In The Pit Inc.\" only. For details see the full LICENSE .","title":"Home"},{"location":"#moona-audio-overview","text":"Moona Audio is a Unity3D plugin written by Maris Tammik for A Shell In The Pit Inc. bringing advanced audio playback possibilities and enabling sound designers to implement and control audio easily while making integration and playback from code a breeze. streamline dynamic audio asset creation simple API for complex audio behaviour customizable (full source code)","title":"Moona Audio Overview"},{"location":"#getting-started","text":"To get started with designing sound behaviours in Moona start here and if you want to use the Moona API in from script start here .","title":"Getting Started"},{"location":"#license","text":"Moona Audio is licensend to clients of \"A Shell In The Pit Inc.\" only. For details see the full LICENSE .","title":"License"},{"location":"about/LICENSE/","text":"Copyright 2019 A Shell In The Pit Inc. Any person (the \"Client\") obtaining a copy of this software and associated documentation files (the \"Software\") has the rights to use and distribute the Software, subject to the following conditions: The Software was obtained through \"A Shell In The Pit Inc.\" (the \"Studio\") and contract outlining compensation for the Studio has been made between the Client and the Studio. The Software is only distributed in copiled form (not in human readable \"source code\"). The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/features/","text":"For sound designers runtime blending of playable items random playable item playback (do not repeat x variations) allow iteration on MObjects without dirtying any scene (no merge conflicts) custom attenuations for distance and/or input parameters, automated MObject creation via import using designated naming conventions (ie. creating MObject random asset from a list of sounds, create a blending playable item from a list of sounds) For game developers simple initialization via a single API call no-fuss audio playback via MAudioOnStart components easy control over continous & dynamic sounds by catching MHandle object wich return from MObject.Play() call control volume, pitch, seek, playback state control dynamic expression (ie intensity) basic voice management & instance limiting based on: MObject settings volume priority offset MixerGroup limits only active voices that are audible use an AudioSource (infinite virtual voices ) scriptable audio mixer (no manual \"expose volume parameter\" required)","title":"Features"},{"location":"about/features/#for-sound-designers","text":"runtime blending of playable items random playable item playback (do not repeat x variations) allow iteration on MObjects without dirtying any scene (no merge conflicts) custom attenuations for distance and/or input parameters, automated MObject creation via import using designated naming conventions (ie. creating MObject random asset from a list of sounds, create a blending playable item from a list of sounds)","title":"For sound designers"},{"location":"about/features/#for-game-developers","text":"simple initialization via a single API call no-fuss audio playback via MAudioOnStart components easy control over continous & dynamic sounds by catching MHandle object wich return from MObject.Play() call control volume, pitch, seek, playback state control dynamic expression (ie intensity) basic voice management & instance limiting based on: MObject settings volume priority offset MixerGroup limits only active voices that are audible use an AudioSource (infinite virtual voices ) scriptable audio mixer (no manual \"expose volume parameter\" required)","title":"For game developers"},{"location":"manual/getting_started/","text":"Overview Definitions MObject MPlayable MPlayableItem The Inspector The \"Moona\" Menu If the Moona code is present in the game's Asset folder somewhere a menu labeled \"Moona\" should appear in the top. This Menu offers various tools and options you might fin helpful when designing sound.","title":"Getting Started"},{"location":"manual/getting_started/#overview","text":"","title":"Overview"},{"location":"manual/getting_started/#definitions","text":"MObject MPlayable MPlayableItem","title":"Definitions"},{"location":"manual/getting_started/#the-inspector","text":"","title":"The Inspector"},{"location":"manual/getting_started/#the-moona-menu","text":"If the Moona code is present in the game's Asset folder somewhere a menu labeled \"Moona\" should appear in the top. This Menu offers various tools and options you might fin helpful when designing sound.","title":"The \"Moona\" Menu"},{"location":"manual/implementing/","text":"Creating an Asset To create a new MPlayable object navigate to the Assets/Moona/Data/ directory in the Unity browser and right click. From the context menu select Create Asset/Moona/MPlayable . The newly created object will be selected and show up in the Inspector view. Adding Audio To add sound to the object simply dra-and-drop an AudioClip into the inspector. If you add another AudioClip it will be added to the bottom of the playlist. To drag multiple clips at once, select the MPlayable asset, slect the little lock at the top right of the inspector to lock it's view, then navigate to your audioclips and select which ever clips you want to add, then simply drag them in together. Properties The Inspector for MPlayable has multiple sections labeled \"AudioProp\", \"SpatialProp\", \"AdvancedProp\", \"RtpcProp\" and below it all the \"Playlist View\". Each of these properties and their effect on the sound behaviour will be discussed in more detail in the following pages.","title":"Basic Implementation"},{"location":"manual/implementing/#creating-an-asset","text":"To create a new MPlayable object navigate to the Assets/Moona/Data/ directory in the Unity browser and right click. From the context menu select Create Asset/Moona/MPlayable . The newly created object will be selected and show up in the Inspector view.","title":"Creating an Asset"},{"location":"manual/implementing/#adding-audio","text":"To add sound to the object simply dra-and-drop an AudioClip into the inspector. If you add another AudioClip it will be added to the bottom of the playlist. To drag multiple clips at once, select the MPlayable asset, slect the little lock at the top right of the inspector to lock it's view, then navigate to your audioclips and select which ever clips you want to add, then simply drag them in together.","title":"Adding Audio"},{"location":"manual/implementing/#properties","text":"The Inspector for MPlayable has multiple sections labeled \"AudioProp\", \"SpatialProp\", \"AdvancedProp\", \"RtpcProp\" and below it all the \"Playlist View\". Each of these properties and their effect on the sound behaviour will be discussed in more detail in the following pages.","title":"Properties"},{"location":"manual/debugging/instance_window/","text":"Instance Window The Instance Window allows us to monitor which MObjects are playing and to which Instance each voice is attached. It also is capable of displaying certail values the Voice currently holds.","title":"Instance Window"},{"location":"manual/debugging/instance_window/#instance-window","text":"The Instance Window allows us to monitor which MObjects are playing and to which Instance each voice is attached. It also is capable of displaying certail values the Voice currently holds.","title":"Instance Window"},{"location":"manual/debugging/mdebugger/","text":"MDebugger The MDebugger allows us to monitor which MObjects were played, in order. It also allows us to inspect which GameObject (if any) was passed in it's playcall.","title":"MDebugger"},{"location":"manual/debugging/mdebugger/#mdebugger","text":"The MDebugger allows us to monitor which MObjects were played, in order. It also allows us to inspect which GameObject (if any) was passed in it's playcall.","title":"MDebugger"},{"location":"manual/mconfig/mconfig_debug/","text":"Debug Options This section allws to enable certain tooling for in editor debug info. Enable Debug Mode This is the basic debug on/off switch. without it many debug options will not funtion properly. One effect is that Moona will start printing important messages to the console so if Moona behaves odd in some way this would be the first thing to enable. Enable Verbose Logging This option increases the amount of debug info. Moona will print lots of information about it's state. To use this information in depth knowledge might be required. Measure Listener Levels This option captures the pieak and average volumes of the AudioListener in the editor every frame. If Draw Debug Gizmos is enabled it will display the current values and displays them in the game view. Draw Debug Gizmos toggles various gizmos for debugging (Listener levels, FlatPanning configuration, AudioSource lables). Draw AudioSource Labels This option enables floating lables at the screen position of each AudioSource managed by Moona.","title":"Debug Options"},{"location":"manual/mconfig/mconfig_debug/#debug-options","text":"This section allws to enable certain tooling for in editor debug info.","title":"Debug Options"},{"location":"manual/mconfig/mconfig_debug/#enable-debug-mode","text":"This is the basic debug on/off switch. without it many debug options will not funtion properly. One effect is that Moona will start printing important messages to the console so if Moona behaves odd in some way this would be the first thing to enable.","title":"Enable Debug Mode"},{"location":"manual/mconfig/mconfig_debug/#enable-verbose-logging","text":"This option increases the amount of debug info. Moona will print lots of information about it's state. To use this information in depth knowledge might be required.","title":"Enable Verbose Logging"},{"location":"manual/mconfig/mconfig_debug/#measure-listener-levels","text":"This option captures the pieak and average volumes of the AudioListener in the editor every frame. If Draw Debug Gizmos is enabled it will display the current values and displays them in the game view.","title":"Measure Listener Levels"},{"location":"manual/mconfig/mconfig_debug/#draw-debug-gizmos","text":"toggles various gizmos for debugging (Listener levels, FlatPanning configuration, AudioSource lables).","title":"Draw Debug Gizmos"},{"location":"manual/mconfig/mconfig_debug/#draw-audiosource-labels","text":"This option enables floating lables at the screen position of each AudioSource managed by Moona.","title":"Draw AudioSource Labels"},{"location":"manual/mconfig/mconfig_features/","text":"Feature Toggles Instance Updates This option disables the Moona internal entity updates. Only touch this if you know what you are doing Limit Instance Update Rate This option reduces the frequency of entity updates to a certain \"frame rate\" (assuming that value is lower than the actual render frame rate). Culling This option disables voice management and object pooling. Only touch this if you know what you are doing Schene Checks This option determines if Moona detects scene changes without game code callbacks. Some custom systems realy on this feature. Mute On Focus Lost Mute the game's audio when the game looses focus. Static Listener This option places the AudioListener at Vector3(0, 0, 0) and expects the game to handle distance attenuation.","title":"Feature Toggles"},{"location":"manual/mconfig/mconfig_features/#feature-toggles","text":"","title":"Feature Toggles"},{"location":"manual/mconfig/mconfig_features/#instance-updates","text":"This option disables the Moona internal entity updates. Only touch this if you know what you are doing","title":"Instance Updates"},{"location":"manual/mconfig/mconfig_features/#limit-instance-update-rate","text":"This option reduces the frequency of entity updates to a certain \"frame rate\" (assuming that value is lower than the actual render frame rate).","title":"Limit Instance Update Rate"},{"location":"manual/mconfig/mconfig_features/#culling","text":"This option disables voice management and object pooling. Only touch this if you know what you are doing","title":"Culling"},{"location":"manual/mconfig/mconfig_features/#schene-checks","text":"This option determines if Moona detects scene changes without game code callbacks. Some custom systems realy on this feature.","title":"Schene Checks"},{"location":"manual/mconfig/mconfig_features/#mute-on-focus-lost","text":"Mute the game's audio when the game looses focus.","title":"Mute On Focus Lost"},{"location":"manual/mconfig/mconfig_features/#static-listener","text":"This option places the AudioListener at Vector3(0, 0, 0) and expects the game to handle distance attenuation.","title":"Static Listener"},{"location":"manual/mconfig/mconfig_mixer/","text":"Mixer Assignments This section provides accessible references to impotant MMixerGroups Mixer The Unity AudioMixer that handles the audio routing Master The master bus. All audio should be routed through here, either directly or by a MMixerGroup hierarchy. SFX The main MMixerGroup for Sound Effects. These sounds should be related to the game world. Music Music should be routed through this MMixergroup. UI / FE This MMixerGroup should route all user interface sound that are related to the game, not the game world. VO All voice over and dialogue should be routed through here. It might make sense to feed the VO group with seperate MMixerGroup for world VO and front end VO.","title":"Mixer Assignments"},{"location":"manual/mconfig/mconfig_mixer/#mixer-assignments","text":"This section provides accessible references to impotant MMixerGroups","title":"Mixer Assignments"},{"location":"manual/mconfig/mconfig_mixer/#mixer","text":"The Unity AudioMixer that handles the audio routing","title":"Mixer"},{"location":"manual/mconfig/mconfig_mixer/#master","text":"The master bus. All audio should be routed through here, either directly or by a MMixerGroup hierarchy.","title":"Master"},{"location":"manual/mconfig/mconfig_mixer/#sfx","text":"The main MMixerGroup for Sound Effects. These sounds should be related to the game world.","title":"SFX"},{"location":"manual/mconfig/mconfig_mixer/#music","text":"Music should be routed through this MMixergroup.","title":"Music"},{"location":"manual/mconfig/mconfig_mixer/#ui-fe","text":"This MMixerGroup should route all user interface sound that are related to the game, not the game world.","title":"UI / FE"},{"location":"manual/mconfig/mconfig_mixer/#vo","text":"All voice over and dialogue should be routed through here. It might make sense to feed the VO group with seperate MMixerGroup for world VO and front end VO.","title":"VO"},{"location":"manual/mconfig/mconfig_spatialization/","text":"2D Panning This section controls various behaviours for MObjects which have their spatialization mode set to channel and those played with the MObject.Play2D() call. 2D Threshold Pan Depth The amount of panning allowed. If this value is reduced hard panning left or right will result in crossover to the opposing audio channel. Distance Factor This option allows multiplying all distances with a certain factor. It is useful for when the game world or the player get scaled. Distance Factor affects override This option determines if the distance factor affects override distances ( MHandle.SetDistance() ). Flat Panning Flat Pannin is a spatialization sceme that pans sound based on where their 3D position map onto the camera viewport. Some of the flat panning options can be visualized by enableg \"Debug Gizmos\". Center % This option determines the size of the inner box, within which sounds are played at full volume. Outer % This option determines the size of the outer box, outside of which sounds are attenuated by \"Flat Range\" as a distance value. Flat Range This option determines the range covered for linearly interpolating between the inner and outer box. Flat Pannin Depth This option determines how the sceen based panning value (y axis) maps to an output panning value (y axis).","title":"Spatialization"},{"location":"manual/mconfig/mconfig_spatialization/#2d-panning","text":"This section controls various behaviours for MObjects which have their spatialization mode set to channel and those played with the MObject.Play2D() call.","title":"2D Panning"},{"location":"manual/mconfig/mconfig_spatialization/#2d-threshold","text":"","title":"2D Threshold"},{"location":"manual/mconfig/mconfig_spatialization/#pan-depth","text":"The amount of panning allowed. If this value is reduced hard panning left or right will result in crossover to the opposing audio channel.","title":"Pan Depth"},{"location":"manual/mconfig/mconfig_spatialization/#distance-factor","text":"This option allows multiplying all distances with a certain factor. It is useful for when the game world or the player get scaled.","title":"Distance Factor"},{"location":"manual/mconfig/mconfig_spatialization/#distance-factor-affects-override","text":"This option determines if the distance factor affects override distances ( MHandle.SetDistance() ).","title":"Distance Factor affects override"},{"location":"manual/mconfig/mconfig_spatialization/#flat-panning","text":"Flat Pannin is a spatialization sceme that pans sound based on where their 3D position map onto the camera viewport. Some of the flat panning options can be visualized by enableg \"Debug Gizmos\".","title":"Flat Panning"},{"location":"manual/mconfig/mconfig_spatialization/#center","text":"This option determines the size of the inner box, within which sounds are played at full volume.","title":"Center %"},{"location":"manual/mconfig/mconfig_spatialization/#outer","text":"This option determines the size of the outer box, outside of which sounds are attenuated by \"Flat Range\" as a distance value.","title":"Outer %"},{"location":"manual/mconfig/mconfig_spatialization/#flat-range","text":"This option determines the range covered for linearly interpolating between the inner and outer box.","title":"Flat Range"},{"location":"manual/mconfig/mconfig_spatialization/#flat-pannin-depth","text":"This option determines how the sceen based panning value (y axis) maps to an output panning value (y axis).","title":"Flat Pannin Depth"},{"location":"manual/mconfig/mconfig_voicemanagement/","text":"Voice Management Maximumm Voice Count The maximum amount of \"real voices\" ie AudioSources spawned by Moona. This setting goes hand in hand with the menu option Edit/ProjectSettings/Audio/Max Real Voices . If the game uses \"naked AudioSources\" (not managed by Moona) the project settings should have their limit set higher than the MConfig. Otherwise they can be set to the same value. Culling Volume The volume below which Voices will virtualize to save processing and free up AudioSources for other sounds to render audio. Culling Pitch The pitch below which Voices will virtualize (see culling volume for more info).","title":"Voice Management"},{"location":"manual/mconfig/mconfig_voicemanagement/#voice-management","text":"","title":"Voice Management"},{"location":"manual/mconfig/mconfig_voicemanagement/#maximumm-voice-count","text":"The maximum amount of \"real voices\" ie AudioSources spawned by Moona. This setting goes hand in hand with the menu option Edit/ProjectSettings/Audio/Max Real Voices . If the game uses \"naked AudioSources\" (not managed by Moona) the project settings should have their limit set higher than the MConfig. Otherwise they can be set to the same value.","title":"Maximumm Voice Count"},{"location":"manual/mconfig/mconfig_voicemanagement/#culling-volume","text":"The volume below which Voices will virtualize to save processing and free up AudioSources for other sounds to render audio.","title":"Culling Volume"},{"location":"manual/mconfig/mconfig_voicemanagement/#culling-pitch","text":"The pitch below which Voices will virtualize (see culling volume for more info).","title":"Culling Pitch"},{"location":"manual/mobject/mobject_advanced/","text":"Advanced Properties Voice Management Filtyering Additional Spatialization Options Misc Options Occlusion Playback Offset","title":"Advance Properties"},{"location":"manual/mobject/mobject_advanced/#advanced-properties","text":"","title":"Advanced Properties"},{"location":"manual/mobject/mobject_advanced/#voice-management","text":"","title":"Voice Management"},{"location":"manual/mobject/mobject_advanced/#filtyering","text":"","title":"Filtyering"},{"location":"manual/mobject/mobject_advanced/#additional-spatialization-options","text":"","title":"Additional Spatialization Options"},{"location":"manual/mobject/mobject_advanced/#misc-options","text":"","title":"Misc Options"},{"location":"manual/mobject/mobject_advanced/#occlusion","text":"","title":"Occlusion"},{"location":"manual/mobject/mobject_advanced/#playback-offset","text":"","title":"Playback Offset"},{"location":"manual/mobject/mobject_audio/","text":"Audio Properties Volume The Volume slider allows changing the volume of the MObjects playback (in dB). If the chackbox below is enabled the random amount slider is anabled and can be used to define a range of volumes for each individual Play() call. Pitch The Pitch slider allows changing the pitch of the MObjects playback (in semitones). If the chackbox below is enabled the random amount slider is anabled and can be used to define a range of pitches for each individual Play() call. Looping Plays the MObject's items in looping mode. This requires the game code to call 'Stop()' on the sound instance. Mixer Group / Routing The Mixer Group field can be used to assign an UnityEngine.AudioMixerGroup to the MObject. Preferably this option stays blank and a MMixerGroup is assigned above the Audio Properties section instead. Fading An Advanced Property is required to enabled fading. If one can be added a button will appear to do so. Fading in and out are defined by two parameters each. The fade time is the amount of seconds it takes for the fade to complete. The fade curve determines the slope of the fade As fading happens in volume factor (linear, not dB) space, a linear fade will sound rather loud at low levels and change little at high levels. To accomplish a smoother fade in an Ease-In option should be chosen. To accomplish a smoother fade out an ease out should be chosen. The easing options become more sloped (less linear) in the following order: Quad Qubic Sine Exponential","title":"Audio Properties"},{"location":"manual/mobject/mobject_audio/#audio-properties","text":"","title":"Audio Properties"},{"location":"manual/mobject/mobject_audio/#volume","text":"The Volume slider allows changing the volume of the MObjects playback (in dB). If the chackbox below is enabled the random amount slider is anabled and can be used to define a range of volumes for each individual Play() call.","title":"Volume"},{"location":"manual/mobject/mobject_audio/#pitch","text":"The Pitch slider allows changing the pitch of the MObjects playback (in semitones). If the chackbox below is enabled the random amount slider is anabled and can be used to define a range of pitches for each individual Play() call.","title":"Pitch"},{"location":"manual/mobject/mobject_audio/#looping","text":"Plays the MObject's items in looping mode. This requires the game code to call 'Stop()' on the sound instance.","title":"Looping"},{"location":"manual/mobject/mobject_audio/#mixer-group-routing","text":"The Mixer Group field can be used to assign an UnityEngine.AudioMixerGroup to the MObject. Preferably this option stays blank and a MMixerGroup is assigned above the Audio Properties section instead.","title":"Mixer Group / Routing"},{"location":"manual/mobject/mobject_audio/#fading","text":"An Advanced Property is required to enabled fading. If one can be added a button will appear to do so. Fading in and out are defined by two parameters each. The fade time is the amount of seconds it takes for the fade to complete. The fade curve determines the slope of the fade As fading happens in volume factor (linear, not dB) space, a linear fade will sound rather loud at low levels and change little at high levels. To accomplish a smoother fade in an Ease-In option should be chosen. To accomplish a smoother fade out an ease out should be chosen. The easing options become more sloped (less linear) in the following order: Quad Qubic Sine Exponential","title":"Fading"},{"location":"manual/mobject/mobject_list/","text":"The List View Actions The leadin and follow actions require an Advanced proprty to be present in the MObject. A button will appear if one can be added. Each action will have an object field for the item to be played, an indicator of the MObjects fade times and a volume offset (dB). Leadin Action The leadin action is triggered befor the main part of the MObject gets played back. This feature is useful for power up sounds (car engine starting). The main sound will start playing right after the leadin is finished, unless a fade in time is set in which case it will be played that amount of time before the leadin finishes. Follow Action This feature is useful for power down sounds or when we want to chan multiple MObjects together. It's also possible to set the follow action to the MObject itself in which case the MObject will retriger once it's done playing (useful for a music playlist). The follow action is played the sound instance is stopped ( Stop() is called) or once the sound reaches end of playback. When a fadeout time is set for the MObject the follow action will trigger that amount of time early to overlap the fadeout with the follow action. The Playlist Playmode The Playmode determines how the playlist is evaluated. The options available are: Sequence Each trigger will play the next The playlist loops. Random Each trigger will pick a random item to play. Respects the \"don't repeat\" option. Weighted Each trigger will pick a item according to their weights. If all weights are the same the behaviour is identical to \"Random\". Respects the \"don't repeat\" option (which might affect weighting). Blending Plays all items at once. The RTPC properties diplay the container blending parameters for each item. Don't Repeat Last This option ensure that a certain amount of item playback history will be kept to avoid repititions. This might interfere with weighted playback. Item List Each MPlayable Item in the playlist is represented in one row. Object Field Display the AudioClip/MObject to be played Length Display the length of the current item Volume Offset the items volume (dB) Weighted Determines the items weight in weighted playback Play Button Use to audiotion the item","title":"The List View"},{"location":"manual/mobject/mobject_list/#the-list-view","text":"","title":"The List View"},{"location":"manual/mobject/mobject_list/#actions","text":"The leadin and follow actions require an Advanced proprty to be present in the MObject. A button will appear if one can be added. Each action will have an object field for the item to be played, an indicator of the MObjects fade times and a volume offset (dB).","title":"Actions"},{"location":"manual/mobject/mobject_list/#leadin-action","text":"The leadin action is triggered befor the main part of the MObject gets played back. This feature is useful for power up sounds (car engine starting). The main sound will start playing right after the leadin is finished, unless a fade in time is set in which case it will be played that amount of time before the leadin finishes.","title":"Leadin Action"},{"location":"manual/mobject/mobject_list/#follow-action","text":"This feature is useful for power down sounds or when we want to chan multiple MObjects together. It's also possible to set the follow action to the MObject itself in which case the MObject will retriger once it's done playing (useful for a music playlist). The follow action is played the sound instance is stopped ( Stop() is called) or once the sound reaches end of playback. When a fadeout time is set for the MObject the follow action will trigger that amount of time early to overlap the fadeout with the follow action.","title":"Follow Action"},{"location":"manual/mobject/mobject_list/#the-playlist","text":"","title":"The Playlist"},{"location":"manual/mobject/mobject_list/#playmode","text":"The Playmode determines how the playlist is evaluated. The options available are: Sequence Each trigger will play the next The playlist loops. Random Each trigger will pick a random item to play. Respects the \"don't repeat\" option. Weighted Each trigger will pick a item according to their weights. If all weights are the same the behaviour is identical to \"Random\". Respects the \"don't repeat\" option (which might affect weighting). Blending Plays all items at once. The RTPC properties diplay the container blending parameters for each item.","title":"Playmode"},{"location":"manual/mobject/mobject_list/#dont-repeat-last","text":"This option ensure that a certain amount of item playback history will be kept to avoid repititions. This might interfere with weighted playback.","title":"Don't Repeat Last"},{"location":"manual/mobject/mobject_list/#item-list","text":"Each MPlayable Item in the playlist is represented in one row. Object Field Display the AudioClip/MObject to be played Length Display the length of the current item Volume Offset the items volume (dB) Weighted Determines the items weight in weighted playback Play Button Use to audiotion the item","title":"Item List"},{"location":"manual/mobject/mobject_rtpc/","text":"RTPC properties The RTPC (\"Real Time Parameter Control\") properties allow manipulating sound right before it plays for the first time and optionally to keep adjusting the audio behaviour throuout playback. Container Blending When the MObject is set to PlaybackMode.Blending this section will display a list of modulation for each \"MPlayableItem\" in the playlist. Distribute Curves Update Container Modulations Container Modulations MObject Modulations Modulation Items Modulation Inputs Instance Parameter RTPC Parameter Velocity Parameter Distance Parameter Modulation Targets Volume Pitch Low Pass Filter Frequence High Pass Filter Frequence","title":"RTPC Properties"},{"location":"manual/mobject/mobject_rtpc/#rtpc-properties","text":"The RTPC (\"Real Time Parameter Control\") properties allow manipulating sound right before it plays for the first time and optionally to keep adjusting the audio behaviour throuout playback.","title":"RTPC properties"},{"location":"manual/mobject/mobject_rtpc/#container-blending","text":"When the MObject is set to PlaybackMode.Blending this section will display a list of modulation for each \"MPlayableItem\" in the playlist.","title":"Container Blending"},{"location":"manual/mobject/mobject_rtpc/#distribute-curves","text":"","title":"Distribute Curves"},{"location":"manual/mobject/mobject_rtpc/#update-container-modulations","text":"","title":"Update Container Modulations"},{"location":"manual/mobject/mobject_rtpc/#container-modulations","text":"","title":"Container Modulations"},{"location":"manual/mobject/mobject_rtpc/#mobject-modulations","text":"","title":"MObject Modulations"},{"location":"manual/mobject/mobject_rtpc/#modulation-items","text":"","title":"Modulation Items"},{"location":"manual/mobject/mobject_rtpc/#modulation-inputs","text":"Instance Parameter RTPC Parameter Velocity Parameter Distance Parameter","title":"Modulation Inputs"},{"location":"manual/mobject/mobject_rtpc/#modulation-targets","text":"Volume Pitch Low Pass Filter Frequence High Pass Filter Frequence","title":"Modulation Targets"},{"location":"manual/mobject/mobject_spatial/","text":"Spatial Properties Spatial Mode The spatial mode determines how the sound gets spatialized (ie how it's 3D position translates to panning etc). The options are: Channel 2D playback - No spatialization applied. Spatial 3D playback - Use the default vector based amplitude panning supplied by Unity. Use this if you want to also apply HRTF spatialization. Flat Uses the 2D position in the camera's view port to determine distnace from the center, and panning. See MConfig: Spatialization for information on configuring \"Flat Panning\". Panning Options When set to Channel or Flat mode, or when the \"3D Spatial Blend\" option is less that 1 the panning options are visible. The Pan determines the left/right panning of the sound. The Pan Depth below it limits the amount of panning that the sound can have applied. Limiting the pan depth to 0.5 makes it so if the soudn instance is panned har left, the MObject's panning will only be panned to the left a little. Spatial Options Spatial Blend The 3D spatial blend determines how much the spatialization of the sound should be based on the 3D position, and how much of the panning should happen in 2D space. Static Position Even when passing in a Tranform as position data to an MObject.Play() call, the MObject will be played in 3D space, but not follow the transform if it moves. HRTF This option will enable the \"Head Related Transfer Function\" (HRTF) to be applied to the sound. This only has an effect if the sound is played with a spatial blend of greater than 0 and a Spatialization plugin is set. Depending on the project this might use one of the Unity builtin spatializers such as \"Oculus\", or use a 3rd party plugin such as \"Steam Audio\" (which needs additional setup to work properly). Attenuation The attenuation mode determines the math used to transform the 3D position of the sound to a distance attenuation. Linear The amplitude halfway betwen min and max distance is half (-6 dB) Logarithmic An approximation of a Logarithmic falloff curve. Models reality a bit. Custom Set a custum curve in the Curve editor. The minimum distance determines at which distance the attenuation begins. When the distance is lower than this value the sound will play at full volume. The maximum distance determines at which poit the sound will go silent. If the the attenuation is set to \"Custom\" the value at the very right of the attenuation curve will be used.","title":"Spatial Properties"},{"location":"manual/mobject/mobject_spatial/#spatial-properties","text":"","title":"Spatial Properties"},{"location":"manual/mobject/mobject_spatial/#spatial-mode","text":"The spatial mode determines how the sound gets spatialized (ie how it's 3D position translates to panning etc). The options are: Channel 2D playback - No spatialization applied. Spatial 3D playback - Use the default vector based amplitude panning supplied by Unity. Use this if you want to also apply HRTF spatialization. Flat Uses the 2D position in the camera's view port to determine distnace from the center, and panning. See MConfig: Spatialization for information on configuring \"Flat Panning\".","title":"Spatial Mode"},{"location":"manual/mobject/mobject_spatial/#panning-options","text":"When set to Channel or Flat mode, or when the \"3D Spatial Blend\" option is less that 1 the panning options are visible. The Pan determines the left/right panning of the sound. The Pan Depth below it limits the amount of panning that the sound can have applied. Limiting the pan depth to 0.5 makes it so if the soudn instance is panned har left, the MObject's panning will only be panned to the left a little.","title":"Panning Options"},{"location":"manual/mobject/mobject_spatial/#spatial-options","text":"","title":"Spatial Options"},{"location":"manual/mobject/mobject_spatial/#spatial-blend","text":"The 3D spatial blend determines how much the spatialization of the sound should be based on the 3D position, and how much of the panning should happen in 2D space.","title":"Spatial Blend"},{"location":"manual/mobject/mobject_spatial/#static-position","text":"Even when passing in a Tranform as position data to an MObject.Play() call, the MObject will be played in 3D space, but not follow the transform if it moves.","title":"Static Position"},{"location":"manual/mobject/mobject_spatial/#hrtf","text":"This option will enable the \"Head Related Transfer Function\" (HRTF) to be applied to the sound. This only has an effect if the sound is played with a spatial blend of greater than 0 and a Spatialization plugin is set. Depending on the project this might use one of the Unity builtin spatializers such as \"Oculus\", or use a 3rd party plugin such as \"Steam Audio\" (which needs additional setup to work properly).","title":"HRTF"},{"location":"manual/mobject/mobject_spatial/#attenuation","text":"The attenuation mode determines the math used to transform the 3D position of the sound to a distance attenuation. Linear The amplitude halfway betwen min and max distance is half (-6 dB) Logarithmic An approximation of a Logarithmic falloff curve. Models reality a bit. Custom Set a custum curve in the Curve editor. The minimum distance determines at which distance the attenuation begins. When the distance is lower than this value the sound will play at full volume. The maximum distance determines at which poit the sound will go silent. If the the attenuation is set to \"Custom\" the value at the very right of the attenuation curve will be used.","title":"Attenuation"},{"location":"scripting/contributing/","text":"Contributing When changing Moona code comunication is key. ALLWAYS talk to Maris first. This is especially important when making changes to the API. General Rules Naming naming should be done in CamelCaseFashion Class-names must be uppercase public class Value { } Method-names must be uppercase private void DoStuff() { } Public properties and fields must be uppercase public int Count = 5; private member variables must be lowercase and be preceded a underscore private float _parameter = 1.0f; local variables and method parameters must be lowercase Style avoid anything static if possible avoid C# properties unless you: have to run code when setting a value use it to controll access ie: public T PropertyName { get; private set; } access to fields and properties must be defined explicitly via public , private , protected or internal in general fields should be as restrictive as possible classes should be defined as sealed where possible if statements should use statement == false instead of !statement notation It is preferred to have an empty line after closing curly brackets when not followed by another curly brackets or a comment. if statements as well as for and while loops should have a body wrapped in curly { } braces Comments that explain the workings and flow of code are welcome but shouldn't be overwhelming. Use with taste. XML documentation comments for classes, Fields, Properties and Methods are very welcome: /// <summary> /// /// </summary> Unity Specifics Garbage creation should be avoided Project specific extensions to Moona should reside in the Assets/Moona/MoonaExtension/ folder","title":"Contributing"},{"location":"scripting/contributing/#contributing","text":"When changing Moona code comunication is key. ALLWAYS talk to Maris first. This is especially important when making changes to the API.","title":"Contributing"},{"location":"scripting/contributing/#general-rules","text":"","title":"General Rules"},{"location":"scripting/contributing/#naming","text":"naming should be done in CamelCaseFashion Class-names must be uppercase public class Value { } Method-names must be uppercase private void DoStuff() { } Public properties and fields must be uppercase public int Count = 5; private member variables must be lowercase and be preceded a underscore private float _parameter = 1.0f; local variables and method parameters must be lowercase","title":"Naming"},{"location":"scripting/contributing/#style","text":"avoid anything static if possible avoid C# properties unless you: have to run code when setting a value use it to controll access ie: public T PropertyName { get; private set; } access to fields and properties must be defined explicitly via public , private , protected or internal in general fields should be as restrictive as possible classes should be defined as sealed where possible if statements should use statement == false instead of !statement notation It is preferred to have an empty line after closing curly brackets when not followed by another curly brackets or a comment. if statements as well as for and while loops should have a body wrapped in curly { } braces Comments that explain the workings and flow of code are welcome but shouldn't be overwhelming. Use with taste. XML documentation comments for classes, Fields, Properties and Methods are very welcome: /// <summary> /// /// </summary>","title":"Style"},{"location":"scripting/contributing/#unity-specifics","text":"Garbage creation should be avoided Project specific extensions to Moona should reside in the Assets/Moona/MoonaExtension/ folder","title":"Unity Specifics"},{"location":"scripting/controling_sounds/","text":"Controlling MHandles The MHandle object is used to control sound behaviour of dynamic objects by updating their input parameter handle.InputParameter = engineRpm or stop looping sounds handle.Stop() . Below you will find a section of a class that stores an MHandle so it can stop it at a later point in time. You can also see how an optional MInstanceParameters object is being passed in to override the volume of the resulting sound. public MObject sound; private MHandle handle; // volume is passed in in DeciBel (logarithmic unit for volume) public bool PlaySound(float volumeDB) { this.StopSound(); if(sound!= null) { handle = sound.Play ( this.gameobject.transform, new MInstanceParameters { // converting the volume to a linear amplitude factor Volume = Moona.MUtil.DecibelToLinear(volumeDB) } ); } } // fade-out time only applies when shorter than the MObjects define fade-out // a value of '-1' uses the implementation fade time // a value of '0' stops the MHandle immediatly public void StopSound(float fadeTime = -1) { if (handle != null) { handle.Stop(fadeTime); handle = null; } } Re-Parenting a sound handle to another transform can be accomplished like so: handle.SetParent(transform); Or if a MHandle is placed to a new static position or the positioning is being handled in a custom manner this can be done like so: handle.SetPosition(new Vector3(x, y, z)); For games that use custom positioning systems or need to override the distance an MHandle should be perceived at there is the option to pass a double value: handle.SetDistance(distanceFromSolarSystem); To force the seek (/ playback) position of an MHandle one can use handle.SeekTo(battleProgressSeconds); This might have unforeseen consequences. Use with care and seek advice from your sound designers.","title":"Controling Sound Behaviour"},{"location":"scripting/controling_sounds/#controlling-mhandles","text":"The MHandle object is used to control sound behaviour of dynamic objects by updating their input parameter handle.InputParameter = engineRpm or stop looping sounds handle.Stop() . Below you will find a section of a class that stores an MHandle so it can stop it at a later point in time. You can also see how an optional MInstanceParameters object is being passed in to override the volume of the resulting sound. public MObject sound; private MHandle handle; // volume is passed in in DeciBel (logarithmic unit for volume) public bool PlaySound(float volumeDB) { this.StopSound(); if(sound!= null) { handle = sound.Play ( this.gameobject.transform, new MInstanceParameters { // converting the volume to a linear amplitude factor Volume = Moona.MUtil.DecibelToLinear(volumeDB) } ); } } // fade-out time only applies when shorter than the MObjects define fade-out // a value of '-1' uses the implementation fade time // a value of '0' stops the MHandle immediatly public void StopSound(float fadeTime = -1) { if (handle != null) { handle.Stop(fadeTime); handle = null; } } Re-Parenting a sound handle to another transform can be accomplished like so: handle.SetParent(transform); Or if a MHandle is placed to a new static position or the positioning is being handled in a custom manner this can be done like so: handle.SetPosition(new Vector3(x, y, z)); For games that use custom positioning systems or need to override the distance an MHandle should be perceived at there is the option to pass a double value: handle.SetDistance(distanceFromSolarSystem); To force the seek (/ playback) position of an MHandle one can use handle.SeekTo(battleProgressSeconds); This might have unforeseen consequences. Use with care and seek advice from your sound designers.","title":"Controlling MHandles "},{"location":"scripting/getting_started/","text":"Getting started To get credentials for the Moona repository ping Maris. Clone the main repository and copy the contents to your Unity project (preferably Assets/Plugins/Moona/ ) From the top menu select Moona/Editor/Setup/Initialize to generate a fresh MConfig file and a basic folder structure It is possible to host Moona as a git submodule or git subproject to tie the versioned Moona code into your project. Project layout The Moona plugin folder structure is as follows: Assets/Plugins/Moona/ Modules/ # The various code modules of Moona # Assets/ # TODO: describe modules Components/ # Core/ # Debug/ # Editor/ # Extensions/ # Mixer/ # Music/ # Reverb/ # RTPC/ # Spatialization/ # VoiceManagement/ # The Moona project folder structure is as follows: Assets/Moona/ MoonaConfig.asset # The configuration file for documentation MDebugLog.asset # An editor asset for holding a timeline of played MObjects Data/ # This folder contains all MObjects MoonaExtension/ # Project specific extensions to Moona (optional) Initializing Moona in game The central system initialization is being handled by the MSetup script. A reference to the MConfig asset we just created is required. The default location for this asset Assets/Plugins/Moona/MConfig.asset . // passing in an MConfig.asset to initialize Moona MSetup.Initialize(this.Config); It is also possible to attach the MSetup scrip to your gams' camera or game controller prefab. This allows it to initialize in any scene easily. Remeber to place a reference to the MConfig file. Documentation You are currently looking at it! It is beinge served on github pages . If you want to read it locally you have the option of either to either run MkDocs to present it as a local website or to read the Markdown files on their own (a markdown compatible viewer would be reccommended). The pubically available documentation repo also contains a Doxygen configuration which can be used to generate a full scripting API documentation (with all methods and fields as well call graphs etc). A built version (html or PDF) available upon request. Testing Repository Another useful resource might be the Moona_Testing repository (same credentials as main repository). It is used for experimentation and Unit-/Integration testing.","title":"Getting Started"},{"location":"scripting/getting_started/#getting-started","text":"To get credentials for the Moona repository ping Maris. Clone the main repository and copy the contents to your Unity project (preferably Assets/Plugins/Moona/ ) From the top menu select Moona/Editor/Setup/Initialize to generate a fresh MConfig file and a basic folder structure It is possible to host Moona as a git submodule or git subproject to tie the versioned Moona code into your project.","title":"Getting started"},{"location":"scripting/getting_started/#project-layout","text":"The Moona plugin folder structure is as follows: Assets/Plugins/Moona/ Modules/ # The various code modules of Moona # Assets/ # TODO: describe modules Components/ # Core/ # Debug/ # Editor/ # Extensions/ # Mixer/ # Music/ # Reverb/ # RTPC/ # Spatialization/ # VoiceManagement/ # The Moona project folder structure is as follows: Assets/Moona/ MoonaConfig.asset # The configuration file for documentation MDebugLog.asset # An editor asset for holding a timeline of played MObjects Data/ # This folder contains all MObjects MoonaExtension/ # Project specific extensions to Moona (optional)","title":"Project layout"},{"location":"scripting/getting_started/#initializing-moona-in-game","text":"The central system initialization is being handled by the MSetup script. A reference to the MConfig asset we just created is required. The default location for this asset Assets/Plugins/Moona/MConfig.asset . // passing in an MConfig.asset to initialize Moona MSetup.Initialize(this.Config); It is also possible to attach the MSetup scrip to your gams' camera or game controller prefab. This allows it to initialize in any scene easily. Remeber to place a reference to the MConfig file.","title":"Initializing Moona in game"},{"location":"scripting/getting_started/#documentation","text":"You are currently looking at it! It is beinge served on github pages . If you want to read it locally you have the option of either to either run MkDocs to present it as a local website or to read the Markdown files on their own (a markdown compatible viewer would be reccommended). The pubically available documentation repo also contains a Doxygen configuration which can be used to generate a full scripting API documentation (with all methods and fields as well call graphs etc). A built version (html or PDF) available upon request.","title":"Documentation"},{"location":"scripting/getting_started/#testing-repository","text":"Another useful resource might be the Moona_Testing repository (same credentials as main repository). It is used for experimentation and Unit-/Integration testing.","title":"Testing Repository"},{"location":"scripting/playing_audio/","text":"Playing Audio Sound designers can implement dynamic audio in MObject assets (deriving from the UnityEngine.ScriptableObject class). MObjects define audio behaviour and can play both AudioClips and/or other MObjects . All MObjects expose the Play() method which takes a position as Transform (the sound follows) or Vector3 (static 3D position). passing a Vector3 has the tiniest of performance benefits. // passing a transform carEngine.Play(this.gameobject.transform); // passing a Vector3 firePlace.Play(new Vector3(x, y, z); For user interface sound we can simply use Play2D() which takes an optional floating point value for panning (-1 left, 0, center, 1 right) // forcing a sound to play in 2D mode buttonSelect.Play2D(); The Play methods each return an MHandle object which is used to control the sound after it has been played (see Controlling MHandles ) These Play methods also take an MInstanceParameters which can be used to control the initial state of the sound, blending of container items and change the Pitch or Volume of a sound according to the parameters passed & the sound designer's implementation. This allows the sound designer to create intricate audio behaviour without coding and enables more artistic control over how the sound changes depending on the game state.","title":"Playing Sounds"},{"location":"scripting/playing_audio/#playing-audio","text":"Sound designers can implement dynamic audio in MObject assets (deriving from the UnityEngine.ScriptableObject class). MObjects define audio behaviour and can play both AudioClips and/or other MObjects . All MObjects expose the Play() method which takes a position as Transform (the sound follows) or Vector3 (static 3D position). passing a Vector3 has the tiniest of performance benefits. // passing a transform carEngine.Play(this.gameobject.transform); // passing a Vector3 firePlace.Play(new Vector3(x, y, z); For user interface sound we can simply use Play2D() which takes an optional floating point value for panning (-1 left, 0, center, 1 right) // forcing a sound to play in 2D mode buttonSelect.Play2D(); The Play methods each return an MHandle object which is used to control the sound after it has been played (see Controlling MHandles ) These Play methods also take an MInstanceParameters which can be used to control the initial state of the sound, blending of container items and change the Pitch or Volume of a sound according to the parameters passed & the sound designer's implementation. This allows the sound designer to create intricate audio behaviour without coding and enables more artistic control over how the sound changes depending on the game state.","title":"Playing Audio "},{"location":"scripting/setting_parameters/","text":"Setting MInstanceParameters In the above section we've seen the use of the MInstanceParameters class. This is used to define audio behaviour when initially playing an MObject , but also to control it's behaviour while it's playing back. You can create a parameter object and initialize it's values like so: MInstanceParameters parameters = new MInstanceParameters() { Volume = 0.5f, InputParameter = this.objectSize, Velocity = impctMagnitudeNormalized }; You can generate these objects freely and pass them to a MHandle like so: handle.SetParameters(parameters); These parameters control only a single instance of a sound at a time. A (discouraged) alternative to MInstanceParameters Alternatively one can use specific function on the MHandle to control one aspect of it at a time but this is discouraged for optimization reasons and might be deprecated at a later point in time. If a 2D sound needs a panning update one can call handle.SetPanning(-0.3f); handle.SetVolume(0.5f); SetPitch(0.75f); Setting Global Parameters Depending on how the sound designers have implemented their sounds there might also be global parameters which can be set to control many aspects of the sound at once. This can be done via the parameter name as a string or the hash of that string. // setting an RTPC via a string MRtpcManager.SetRtpc(\"weatherIntensity\", normalizedIntensity); Calling this function with a string is has a slight performance overhead so it is reccommended to cache the hash of the string instead. // setting an RTPC via an int int rtpcHash = Animator.StringToHash(\"enemyCount\"); MRtpcManager.SetRtpc(rtpcHash, this.Enimies.Count / this.MaxEnimies);","title":"Setting Parameters"},{"location":"scripting/setting_parameters/#setting-minstanceparameters","text":"In the above section we've seen the use of the MInstanceParameters class. This is used to define audio behaviour when initially playing an MObject , but also to control it's behaviour while it's playing back. You can create a parameter object and initialize it's values like so: MInstanceParameters parameters = new MInstanceParameters() { Volume = 0.5f, InputParameter = this.objectSize, Velocity = impctMagnitudeNormalized }; You can generate these objects freely and pass them to a MHandle like so: handle.SetParameters(parameters); These parameters control only a single instance of a sound at a time. A (discouraged) alternative to MInstanceParameters Alternatively one can use specific function on the MHandle to control one aspect of it at a time but this is discouraged for optimization reasons and might be deprecated at a later point in time. If a 2D sound needs a panning update one can call handle.SetPanning(-0.3f); handle.SetVolume(0.5f); SetPitch(0.75f);","title":"Setting MInstanceParameters"},{"location":"scripting/setting_parameters/#setting-global-parameters","text":"Depending on how the sound designers have implemented their sounds there might also be global parameters which can be set to control many aspects of the sound at once. This can be done via the parameter name as a string or the hash of that string. // setting an RTPC via a string MRtpcManager.SetRtpc(\"weatherIntensity\", normalizedIntensity); Calling this function with a string is has a slight performance overhead so it is reccommended to cache the hash of the string instead. // setting an RTPC via an int int rtpcHash = Animator.StringToHash(\"enemyCount\"); MRtpcManager.SetRtpc(rtpcHash, this.Enimies.Count / this.MaxEnimies);","title":"Setting Global Parameters"}]}